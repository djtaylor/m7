#!/usr/bin/perl
use strict;

# Load the M7 server module
use lib $ENV{HOME} . '/lib/perl/modules';
use M7Config;
use M7D;

# Create the M7 server object
my $m7d = M7D->new();

# Initialize the logger
$m7d->logInit();

# Set the PID file
$m7d->setPID(
	'file' => $ENV{HOME} . '/run/m7d.pid'
);

# Initialize the database connection
$m7d->dbInit(
	'name' => $m7_db{name},
	'host' => $m7_db{host},
	'port' => $m7_db{port},
	'user' => $m7_db{user},
	'pass' => $m7_db{pass}
);

# Load the plan configurations and process each plan
$m7d->planConfig();

# Process each test plan in the configuration table
foreach(@{$m7d->{_plans}}) {
	my %m7d_plan_obj	= %{$_};
	my $m7d_plan_enbl	= $m7d_plan_obj{'enabled'};
	my $m7d_plan_id 	= $m7d_plan_obj{'plan_id'};
	my $m7d_plan_file	= $m7d_plan_obj{'plan_file'};
	my $m7d_plan_int	= $m7d_plan_obj{'interval'};
	
	# Skip the plan if disabled
	if ($m7d_plan_enbl == '0') {
		$m7d->log->info('Test plan ' . $m7d_plan_id . ' disabled - skipping');
	} else {
		$m7d->log->info('Test plan ' . $m7d_plan_id . ' enabled - forking');
		my $m7d_pid = fork();
	
		# Parent process
		if ($m7d_pid) {
			$m7d->log->info('Fork PID(' . $m7d_pid . ') for test ID ' . $m7d_plan_id);
			push(@{$m7d->{_forks}}, $m7d_pid);
	
		# Child process
		} elsif ($m7d_pid == 0) {
			$m7d->log->info('Launching fork process - run interval = ' . $m7d_plan_int . 's');
			$m7d->forkTest($m7d_plan_id, $m7d_plan_int, $m7d_plan_file);
		
		# Fork error
		} else {
			$m7d->log->logdie('Error forking test process: ' . $!);
		}	
	}
}

# Kepp the server running until all forks are shutdown or until terminated
while (1) {
	
	# No forks present, shutdown
	if (scalar(@{$m7d->forks}) == 0) {
		$m7d->log->info('No fork processes running, terminating server: ' . $$);
		exit 0;
	}
	
	# Catch termination signal
	$SIG{TERM} = sub {
		$m7d->log->info('Received SIGTERM signal');
		foreach(@{$m7d->forks}) {
			$m7d->log->info('Terminating forked process: ' . $_);
			kill('15', $_);
		}
		$m7d->log->info('Terminating server process: ' . $$);
		exit 0;
	}
}
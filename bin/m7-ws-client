/**
 * M7 Socket.IO Client
 * 
 * This client is used to connect from a worker node to the director node via the
 * command line. This is currently being used to transmit messages to the dashboard
 * when testing and node status is updated.
 * 
 * argv[2]: The IP address or hostname to connect to
 * argv[3]: The port to connect to
 * argv[4]: The protocol to use (HTTP/HTTPS)
 * argv[4]: A supported data type string
 * argv[5]: A JSON object to transmit. This will be interpreted by the dashboard
 */

// Import the socket.io-client libraries and enable self-signed SSL certificate validation
var io		= require("socket.io-client");
var proto	= 'http';

// Define client and server connection parameters
client = {
		
	// Server Parameters
	host:   process.argv[2],
    port:   process.argv[3],
    proto:  process.argv[4],
    
    // Client Parameters
    type:   process.argv[5],
    json:   process.argv[6],
    secret: process.argv[7],
    
    // Error code handling
    error: function(e) {
    	switch(e) {
    		case 100:
    			console.log('ERROR ' + e + ': You must specify the server IP/hostname as argument 1');
    			break;
    		case 101:
    			console.log('ERROR ' + e + ': You must specify the server port as argument 2');
    			break;
    		case 102:
    			console.log('ERROR ' + e + ': You must specify either "http" or "https" as argument 3');
    			break;
    		case 103:
    			console.log('ERROR ' + e + ': Invalid protocol - must be "http" or "https" as argument 4');
    			break;
    		case 104:
    			console.log('ERROR ' + e + ': You must specify a client connection type as argument 5');
    			break;
    		case 105:
    			console.log('ERROR ' + e + ': You must specify a JSON data string as argument 6');
    			break;
    		case 106:
    			console.log('ERROR ' + e + ': You must specify the shared secret as argument 7');
    			break;
    		default:
    			console.log('ERROR: Unhandled return code: ' + e);
    			break;
    	}
    },
    
    // Socket.IO object
    io:		require('socket.io-client'),
    init:   function() {
    	var sock;
    	
    	// HTTPS
    	if (this.proto == 'http') {
    		sock = io.connect(client.proto + "://" + client.host + ":" + client.port, {query: 'secret=' + client.secret});
    	}
    	
    	// HTTP
    	if (this.proto == 'https') {
    		sock = this.io.connect(client.proto + "://" + client.host + ":" + client.port, {secure: true, query: 'secret=' + client.secret});
    	}
    	return sock;
    },
    socket: null,
    
    // Connection properties validation
    validate: function() {
    	if (this.host == null || this.host == undefined) { 
    		this.error(100);	// No server hostname/IP specified
    	} else if (this.port == null || this.port == undefined) { 
    		this.error(101);	// No server port specified
    	} else if (this.proto == null || this.proto == undefined) {
    		this.error(102); 	// No connection protocol specified
    	} else if (this.proto != 'http' && this.proto != 'https') {
    		this.error(103);	// Invalid protocol
    	} else if (this.type == null || this.type == undefined) { 
    		this.error(104);	// No client connection type specified
    	} else if (this.json == null || this.json == undefined) { 
    		this.error(105);	// No JSON data string defined
    	} else if (this.secret == null || this.secret == undefined) { 
    		this.error(106);	// No shared secret defined
        } else { 
    		return true; 
    	}
    }
};

// Make sure the required arguments are supplied before proceeding
if (!client.validate()) {
    console.log('Client validation failed. Please check your command line arguments...');
} else {
	
	// Construct the Socket.IO client and join the 'node-client' room
	client.socket = client.init();
	client.socket.emit('join', { room: 'node-client' });
	
    // Construct the JSON object
    var json = { 'type': client.type, 'json': client.json };

    // Transmit JSON object on connection
    client.socket.on('connect', function() {
        client.socket.emit('init', json);
        client.socket.disconnect;
    });

    // Handle connection errors and failures
    client.socket.on('error',          function(e) { console.log('ERROR: ' + e); });
    client.socket.on('connect_failed', function(e) { console.log('ERROR: ' + e); });
}